
cd <folder> >>>> masuk ke folder
cd .. >>>> keluar folder

git init >>>> membuat folder menjadi repository (master)

sebelum bisa commi, hrus menulis nama dan email yang commnit

get config --global user.email "email@dassdad.com"
get config --global user.name "email@dassdad.com"

cara commit repository 
ubah file mau nambah atau hapus >>>> git add . (untuk masukkan ke stage smua file yang diubah dan ditambahkah) git add <nama.file> (untuk memasukkan ke stage 1 file saja mau di ubah/ditambahkan)

setelah masuk ke stage. maka
git commit -m "komentar commit" ( -m adalah message)

kalau  git commnit >>>> hanya masuk ke sublime yang sudah di tetapkan pas di download  

kalau masuk ke vim cara keluarnya itu >>>> esc lalu tulis :q!

pwd >>>> adalah menampilkan lokasi sekarang di git bash nya 

cara ke folder yang ingin kita git kan langsung saja di cd () lalu seret foldernya ke git bashnya 
atau langsung ke folder yang ingin kita gitkan lalu klik kanan, lalu klik git bash here, nnti muncul git bashnya sendiri >>>> tpi ini belum langsung jadi repository masih harus di git init

clear >>>> membersihkan area terminal menjadi kosong 

Ctrl + c >>>> membatalkan perintal di terminal

cara agar commit tanpa add dan langsung berkomentar iyalah
git commit -a -m "komentar" >>>> -a adalah add atau bisa juga
git commit -am "komentar" 


git branch >>>> menampilkan branch apa aja >>>> klau ada * dan berwarna hijau artinya branchnya lagi aktif

git branch (nama) >>>> membuat branch dengan commit yang sama pada saat branch itu dibuat 

git log >>>> menampilkan history commit

git log --all --decorate --oneline --graph >>>> menampilkan graph network seperti di github

karna diatas perintahnya terlalu panjang dapat dibuatkan command sendiri dengan 
alias <nama> "git log --all --decorate --oneline --graph"
nnti tinggal panggil <nama> akan memanggil command git log --all --decorate --oneline --graph   >>>>> ini tidak work di visual studio code hanya di git brash

git checkout <nama_branch> >>>>> untuk pindah branch


>> git log --all --decorate --oneline --graph
* a151358 (HEAD -> staff) menambahkan file staff
| * c2f81dd (dosen) menambahkan file dosen.html
|/  
* 1f06922 (master) menambahkan list mahasiswa
* ac4be1e menambahkan file mahasiswa.html


| >>>> artinya cabang/ branch
* >>>> artinya di commit 
(HEAD) artinya yang aktif yaitu sekrang kita di cabang yang mana

merge atau menggabungkan branch, dimana ada fast forward dan threeway marge, fast forward adalah direct perf atau jalur langsung, dimana diatas setelah di graph dapat diketahui headnya di staff, nah itu di pindaih dlu ke master, setelah headnya di master, dapat dilihat jalur langsungnya sekarang itu di staff dan dosen sesuai di graph tadi, nah jadi ingin merge dengan dosen, maka:

git marge dosen >>>> menggabungkan branch dosen dengan master 

PS D:\git 2> git merge dosen 
Updating 1f06922..c2f81dd
Fast-forward
 dosen.html | 14 ++++++++++++++
 1 file changed, 14 insertions(+)
 create mode 100644 dosen.html     >>>>>>>>  14 menandakan jumlah baris pada codingan file dosen.html, dimana yang terjadi adalah fast forward

setelah itu branch dosen tidak dibutuhkan lagi , jadi kita hapus branch dosen, dimana kita saat ini harus di branch master
dengan command

git branch -d dosen >>>> d adalah delate 

git branch --merged >>>> adalah perintah untuk mengetahui branch mana yang sudah di merge, jadi perintah ini untuk melihat apakah aman jika kita mendelate suatu branch yang sudah di merge atau tidak 

branch yang belum di merge tidak bisa di delate menggunakan git branch -d <namabranch> , error: The branch 'staff' is not fully merged.
If you are sure you want to delete it, run 'git branch -D staff'. dimana harus memakai D besar untuk menghapusnya dengan mengabaikan warning blum di merge

dimana sekarang jika di git branch 
akan menghasilkan 
* a151358 (staff) menambahkan file staff
| * c2f81dd (HEAD -> master) menambahkan file dosen.html
|/
* 1f06922 menambahkan list mahasiswa
* ac4be1e menambahkan file mahasiswa.html
dimana master tidak terhubung langsung atau direct perflnya 
maka jika di merge yang akan terjadi adalah three way merge atau merge commmit yaitu sambil mere sambil buat commmit baru 

nah jika di merge dimana headnya akan di master dengan menghasilkan commit baru 

yang perintah alias <nama> "git log --all --decorate --oneline --graph" jika komputer sudah mati, alisnya sudah tidak berfungsi lagi 

pada git merge conflict , di visual studio itu yang ijo adalah head yang aktif dan yang warna biru adalah branch yang ingin digabungkan 


diman head yang telah di branch paling ujung akan pindah headnya ke commit yang di checkout 
git checkout ambil 7digit strig
lalu cek kode editor
git checkout master >>>> kembali ke branch paling ujung
lalu kembali ke commit yang tadi 
pakai command sebelumnya juga sama
dimana bisa di buat branch baru juga di commit itu
git branch test
graph
dimana headnya belum mengarah ke branch test, masih terpisah (HEAD, test)
jadi harus git checkout test
graph
(HEAD -> test)
tapi gtw kenapa di graph tidak muncul cabang garis

jika 
git commit >>>>> saja ditulis di git bash, dimana akan muncul tst editor, itu di save aja  nnti d icommit sendiri diman di text editor itu sudah ada pesan commit di paling atas, jadi save as dan close, maka git sudah ter commit


---------------------------
remote repostirory github ke lokal komputer 
- copy link https
buat tmpt penyimpanan di lokal komputer
di tmpt itu cd kan ke git bash,, 
lalu 

gt clone <link https>      >>>>>> gtw kenapa di terminal git bash tidak bisa , di vscode bisa, 

lalu cd kan masuk ke  folder lagi 
dimana folder  itu sudah langsung ter  git init dari githubnya jadi tidak perlu di git initkan lagi, dimana sudah menjadi respository dri github

dimana remote itu ada namanya, dapat dicek di 

git remote >>>> nnti outputnya origin sebagai default name untuk github

klau dibuat sendiri remotenya namnay boleh bebas 

git remote -v  <nama remote> nnti dikasih link origin untuk fetch dan push (dimana fetch dan push linknya sama)

git status 

On branch main
Your branch is up to date with 'origin/main'. >>>>> artinya branchnya sama di lokal dan di github 

nothing to commit, working tree clean

$  alias graph="git log --all --decorate --oneline --graph"

62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$ graph
* 5524868 (HEAD -> main, origin/main, origin/HEAD) Mengupload File Git Commands.
txt
* 85d790d Initial commit


dimana (HEAD -> main, origin/main, origin/HEAD) >>> ada 3 buah branch, yang merah itu origin/main, origin/HEAD ada di remote kita  dimana sama sama di origin/main, origin/HEAD artinya sudah up to date smuanya sama sma isinya  

tambahkan file di repository lokal 
setelah itu add dan commit

dan 
62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$ graph
* df2285f (HEAD -> main) Menambahkan File hmtl
* 5524868 (origin/main, origin/HEAD) Mengupload File Git Commands.txt
* 85d790d Initial commit

62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$


dimana Your branch is ahead of 'origin/main' by 1 commit. dimana branch kita mendahului branch yang di remote 

dapat dilihat di 
$ graph
* df2285f (HEAD -> main) Menambahkan File hmtl
* 5524868 (origin/main, origin/HEAD) Mengupload File Git Commands.txt

jadi hrus di 
git push 


mengecek akun siapa di dipakai saat ini git config --list 


dimana jika berbeda dengan kaun github yang di remote, maka nama yang acak acak repository di github itu sesuai nama dan emial yang dimasukkan di lokal 


dimana sebelumnya sudah di set
get config --global user.email "email@dassdad.com"
get config --global user.name "email@dassdad.com"

dimana namanya dan emialnya sesuai akun githubku, -- global berlaku untuk apapun repository yang dikejerjakan nama dan emailnya itu yang dipakai, jika --local maka berlaku untuk repository itu saja yang saat itu di kerjakan 

jika berbeda dapat di set ulang menggunakan command 
get config --global user.email "email@dassdad.com"
get config --global user.name "email@dassdad.com"

















			