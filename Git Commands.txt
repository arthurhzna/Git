
cd <folder> >>>> masuk ke folder
cd .. >>>> keluar folder

git init >>>> membuat folder menjadi repository (master)

sebelum bisa commi, hrus menulis nama dan email yang commnit

get config --global user.email "email@dassdad.com"
get config --global user.name "email@dassdad.com"

cara commit repository 
ubah file mau nambah atau hapus >>>> git add . (untuk masukkan ke stage smua file yang diubah dan ditambahkah) git add <nama.file> (untuk memasukkan ke stage 1 file saja mau di ubah/ditambahkan)

setelah masuk ke stage. maka
git commit -m "komentar commit" ( -m adalah message)

kalau  git commnit >>>> hanya masuk ke sublime yang sudah di tetapkan pas di download  

kalau masuk ke vim cara keluarnya itu >>>> esc lalu tulis :q!

pwd >>>> adalah menampilkan lokasi sekarang di git bash nya 

cara ke folder yang ingin kita git kan langsung saja di cd () lalu seret foldernya ke git bashnya 
atau langsung ke folder yang ingin kita gitkan lalu klik kanan, lalu klik git bash here, nnti muncul git bashnya sendiri >>>> tpi ini belum langsung jadi repository masih harus di git init

clear >>>> membersihkan area terminal menjadi kosong 

Ctrl + c >>>> membatalkan perintal di terminal

cara agar commit tanpa add dan langsung berkomentar iyalah
git commit -a -m "komentar" >>>> -a adalah add atau bisa juga
git commit -am "komentar" 


git branch >>>> menampilkan branch apa aja >>>> klau ada * dan berwarna hijau artinya branchnya lagi aktif

git branch (nama) >>>> membuat branch dengan commit yang sama pada saat branch itu dibuat 

git log >>>> menampilkan history commit

git log --all --decorate --oneline --graph >>>> menampilkan graph network seperti di github

karna diatas perintahnya terlalu panjang dapat dibuatkan command sendiri dengan 
alias <nama> "git log --all --decorate --oneline --graph"
nnti tinggal panggil <nama> akan memanggil command git log --all --decorate --oneline --graph   >>>>> ini tidak work di visual studio code hanya di git brash

git checkout <nama_branch> >>>>> untuk pindah branch


>> git log --all --decorate --oneline --graph
* a151358 (HEAD -> staff) menambahkan file staff
| * c2f81dd (dosen) menambahkan file dosen.html
|/  
* 1f06922 (master) menambahkan list mahasiswa
* ac4be1e menambahkan file mahasiswa.html


| >>>> artinya cabang/ branch
* >>>> artinya di commit 
(HEAD) artinya yang aktif yaitu sekrang kita di cabang yang mana

merge atau menggabungkan branch, dimana ada fast forward dan threeway marge, fast forward adalah direct perf atau jalur langsung, dimana diatas setelah di graph dapat diketahui headnya di staff, nah itu di pindaih dlu ke master, setelah headnya di master, dapat dilihat jalur langsungnya sekarang itu di staff dan dosen sesuai di graph tadi, nah jadi ingin merge dengan dosen, maka:

git marge dosen >>>> menggabungkan branch dosen dengan master 

PS D:\git 2> git merge dosen 
Updating 1f06922..c2f81dd
Fast-forward
 dosen.html | 14 ++++++++++++++
 1 file changed, 14 insertions(+)
 create mode 100644 dosen.html     >>>>>>>>  14 menandakan jumlah baris pada codingan file dosen.html, dimana yang terjadi adalah fast forward

setelah itu branch dosen tidak dibutuhkan lagi , jadi kita hapus branch dosen, dimana kita saat ini harus di branch master
dengan command

git branch -d dosen >>>> d adalah delate 

git branch --merged >>>> adalah perintah untuk mengetahui branch mana yang sudah di merge, jadi perintah ini untuk melihat apakah aman jika kita mendelate suatu branch yang sudah di merge atau tidak 

branch yang belum di merge tidak bisa di delate menggunakan git branch -d <namabranch> , error: The branch 'staff' is not fully merged.
If you are sure you want to delete it, run 'git branch -D staff'. dimana harus memakai D besar untuk menghapusnya dengan mengabaikan warning blum di merge

dimana sekarang jika di git branch 
akan menghasilkan 
* a151358 (staff) menambahkan file staff
| * c2f81dd (HEAD -> master) menambahkan file dosen.html
|/
* 1f06922 menambahkan list mahasiswa
* ac4be1e menambahkan file mahasiswa.html
dimana master tidak terhubung langsung atau direct perflnya 
maka jika di merge yang akan terjadi adalah three way merge atau merge commmit yaitu sambil mere sambil buat commmit baru 

nah jika di merge dimana headnya akan di master dengan menghasilkan commit baru 

yang perintah alias <nama> "git log --all --decorate --oneline --graph" jika komputer sudah mati, alisnya sudah tidak berfungsi lagi 

pada git merge conflict , di visual studio itu yang ijo adalah head yang aktif dan yang warna biru adalah branch yang ingin digabungkan 


diman head yang telah di branch paling ujung akan pindah headnya ke commit yang di checkout 
git checkout ambil 7digit strig
lalu cek kode editor
git checkout master >>>> kembali ke branch paling ujung
lalu kembali ke commit yang tadi 
pakai command sebelumnya juga sama
dimana bisa di buat branch baru juga di commit itu
git branch test
graph
dimana headnya belum mengarah ke branch test, masih terpisah (HEAD, test)
jadi harus git checkout test
graph
(HEAD -> test)
tapi gtw kenapa di graph tidak muncul cabang garis

jika 
git commit >>>>> saja ditulis di git bash, dimana akan muncul tst editor, itu di save aja  nnti d icommit sendiri diman di text editor itu sudah ada pesan commit di paling atas, jadi save as dan close, maka git sudah ter commit


---------------------------
remote repostirory github ke lokal komputer 
- copy link https
buat tmpt penyimpanan di lokal komputer
di tmpt itu cd kan ke git bash,, 
lalu 

gt clone <link https>      >>>>>> gtw kenapa di terminal git bash tidak bisa , di vscode bisa, 

lalu cd kan masuk ke  folder lagi 
dimana folder  itu sudah langsung ter  git init dari githubnya jadi tidak perlu di git initkan lagi, dimana sudah menjadi respository dri github

dimana remote itu ada namanya, dapat dicek di 

git remote >>>> nnti outputnya origin sebagai default name untuk github

klau dibuat sendiri remotenya namnay boleh bebas 

git remote -v  <nama remote> nnti dikasih link origin untuk fetch dan push (dimana fetch dan push linknya sama)

git status 

On branch main
Your branch is up to date with 'origin/main'. >>>>> artinya branchnya sama di lokal dan di github 

nothing to commit, working tree clean

$  alias graph="git log --all --decorate --oneline --graph"

62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$ graph
* 5524868 (HEAD -> main, origin/main, origin/HEAD) Mengupload File Git Commands.
txt
* 85d790d Initial commit


dimana (HEAD -> main, origin/main, origin/HEAD) >>> ada 3 buah branch, yang merah itu origin/main, origin/HEAD ada di remote kita  dimana sama sama di origin/main, origin/HEAD artinya sudah up to date smuanya sama sma isinya  

tambahkan file di repository lokal 
setelah itu add dan commit

dan 
62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$ graph
* df2285f (HEAD -> main) Menambahkan File hmtl
* 5524868 (origin/main, origin/HEAD) Mengupload File Git Commands.txt
* 85d790d Initial commit

62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/Git/Git (main)
$


dimana Your branch is ahead of 'origin/main' by 1 commit. dimana branch kita mendahului branch yang di remote 

dapat dilihat di 
$ graph
* df2285f (HEAD -> main) Menambahkan File hmtl
* 5524868 (origin/main, origin/HEAD) Mengupload File Git Commands.txt

jadi hrus di 
git push 


mengecek akun siapa di dipakai saat ini git config --list 


dimana jika berbeda dengan kaun github yang di remote, maka nama yang acak acak repository di github itu sesuai nama dan emial yang dimasukkan di lokal 


dimana sebelumnya sudah di set
get config --global user.email "email@dassdad.com"
get config --global user.name "email@dassdad.com"

dimana namanya dan emialnya sesuai akun githubku, -- global berlaku untuk apapun repository yang dikejerjakan nama dan emailnya itu yang dipakai, jika --local maka berlaku untuk repository itu saja yang saat itu di kerjakan 

jika berbeda dapat di set ulang menggunakan command 
get config --global user.email "email@dassdad.com"
get config --global user.name "email@dassdad.com"


---------------------------------------
sekarang repositry lokal di pindahkan ke github

mkdir <nama folder> >>>>>> command membuat folder 


dimana untuk ini kita hrus membuat repository sendiri di github dengan pada saat dibuat tidak mencentang 
Initialize this repository with:

Add a README file
This is where you can write a long description for your project. Learn more about READMEs.


nnti kluar ada dua opsi 

…or create a new repository on the command line >>>> ini dipakai ketika di lokal belum ada repostiroy dan di github juga belum ada repository


…or push an existing repository from the command line >>> pilih ini jika sudah ada di lokal repositrynya 


dimna sebelumnya jika di git remote belum ada muncul git remote nya 


jadi dipilih

…or push an existing repository from the command line
git remote add origin https://github.com/arthurhzna/MyStm32Projects.git
git branch -M main
git push -u origin main


>>>> origin itu nama remotenya, dimana bisa di ganti namanya, tetapi defaultnya pakai origin namanya 
>>>>> git push -u origin main ini adalah perintah untuk mengcopy isi repository lokal ke github
>>>>> Perintah "git branch -M main" digunakan untuk mengganti nama branch utama dari proyek Git menjadi "main"


git remote add origin https://github.com/arthurhzna/MyStm32Projects.git

sekrang sudah terhubung lokal dengan githubnya, 

untuk penggunakan yang otak atik di lokal itu sama seperti diatas yang cara github ke lokal 

dimana ketika diremote ada orang dluan push commitnya, dan kita di lokal terlambat push  ke github artinya kita dahului 1 commit, maka ketika di push di lokal 
akan muncul 

PS D:\Aktivitas Ngoding 2023\MyStm32Projects> git push
To https://github.com/arthurhzna/MyStm32Projects.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/arthurhzna/MyStm32Projects.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
PS D:\Aktivitas Ngoding 2023\MyStm32Projects>


jadi harus di fetch dlu, perbaruhi info commit di remote ke lokal 


PS D:\Aktivitas Ngoding 2023\MyStm32Projects> git fetch
PS D:\Aktivitas Ngoding 2023\MyStm32Projects> git status
On branch main
Your branch and 'origin/main' have diverged,
and have 1 and 1 different commits each, respectively.  
  (use "git pull" to merge the remote branch into yours)

nothing to commit, working tree clean
PS D:\Aktivitas Ngoding 2023\MyStm32Projects> 


dimana sudah diperbaharui .


62853@DESKTOP-AGHS4GH MINGW64 /d/Aktivitas Ngoding 2023/MyStm32Projects (main)
$ graph
* 18552d7 (HEAD -> main) menambahkan style.css
| * 6626520 (origin/main) Menambahkan file style.css
|/
* 2a2fc15 menambahkan paragraf pada index.php
* a06132f menambahkan index.php


sekrang dapat dilihat lokal dan remote bercabang, artinya hrus di merge dlu, sebelum di merge, hrus di ambil file commitnya yang ada di github dengan pull 

lalu ubah di file style.css yang conflict, perbaiki dan add dan commit 

setelah itu git push di lokal
dan sudah di merge


-------------
code . >>>>> digunakan untuk membuat code editor
--------------
multipe remote 

pertama fork diakun kita dari repository orang
setelah itu clone https di lokal komputer

dimana sudah jadi remote origin 

selanjutnya kita ingin repository orang itu up to date dengan repository yang di fork ke repository kita, jadi 
buat lagi remote baru di git bash, usahakan namanya dikasih berbeda 

lalu git remote

dapat dilhat ada dua remote

lalu fetch remote repository orang itu
dengan 
git fetch <nama remote orang itu yang sebelumnya telah di inisialisasi diatas >


sekrang orang itu ubah repositrynya

nah di lokal komputer kita 
kita git status, nah terdeteksi ada perubahan, setleah itu di fetch dlu biar di perbaharui (git fetch <nama remote orang itu yang sebelumnya telah di inisialisasi diatas >) lalu merge  

git merge <nama remote orang itu yang sebelumnya telah di inisialisasi diatas >/master

lalu push -u origin master 
-------------------------------------------------------------------------------------------------------
kodingan ini berlanjut dengan yang tadi yang sinkron ke repositry orang
cara pull request ke repostiry orang yang di fork

nah ketiaka ingin mengubah code, usahan ubah masater repository kita itu di buatkan branch , jadi yang di pull request itu branchnya !

git checkout -b  >>>>> digunakan untuk membuat branch baru dan langsung pindah ke branch itu 

skrng branch sudah pindah di branch yang baru, lalu edit file > add>commit >push ke origin <nama branch> 

nah untuk pull request itu sendiri hanya bisa di website githubnya sendiri 


setelah orang itu menerimana pull requst kira, nah sekrang kita ingin menyamakan lokal kita dengan repostiry di github kita dengan updatean baru dari orang itu
nah caranya itu sama seperti tadi yang diatas 

lalu hapus branch baru yang kita buat itu karna sudah tidak dibutuhkan 


git branch -d <nama branch> >>>>>hapus branch di lokal 
git push origin --d <nama branch> >>>>> hapus branch di github dan push perubahan lokal 

-------------------------------------------------------------------------------------------------------

.gitignore >>> ada ketika kita add&commit ada file yang tidak keikut terbawa ke addnya 

contohnya file sistem di konmputer kita, kita tidak ingin file tersebut ikut terbawa, misalnya file hidden temp di windows, 

carapakai ini adalah
di repository dibuatkan file 
.gitignore

didalam gitignore tuliskan nama filenya 
gitu doang ....


bisa juga dalam file .gitignore di masukkan folder, jadi tuliskan didalam file ignorenya data/

misal mau mengecualikan extension\

*.exe >>>>>>> maka exe akan di kecualikan 

ini ada panduannya di 

https://github.com/github/gitignore dan bisa juga pakai gitignore.io

-------------------------------------
rebase 
      /*(features)
-*-*-*---*(master)  misal nya ada workflow begini


jadi rebase itu branchnya maju ke masternya 

           /*(features)
-*-*-*---*(master)

sehingga di marge sudah dapat di fast forward tanpa membuat commit baru 


digithub dapat dilakukan kolaborasi pada repository orang dimana repository orang itu tidak perlu di pull request lagi, dimana dapat langsung dapat di acak acak mau buat branch mau buat merge atau commit dapat langsung dilakukan, jadi caranya itu ada di setting/collaboratos dengan cara memasukkan username, nama atau email , dimana orang yang diinvt tidak langsung dapat berkolaborasi, dimana orang yang di invt harus mengacc terlebih dahulu

dan dimana cara masukkan reponya ke loak litu sama seperti biasa 


aturan colaborasi adalah, dimana setiap menambahkan fitur, kita harus menambahkan branch dlu supaya di maste tidak terganggu ........

untuk rebase kita hrus pindah ke branch cabang atau diatas (features) dengan perintah

git rebase master 

dimana masternya akan ketinggalan 

           /*(features)
-*-*-*---*(master)

jadi pindah ke master, lalu rebase lagi 

git rebase features 

lalu push lagi ke origin github 

git push -u origin master >>>>> klau nda yakin, tpi klau mau push usahana pakai -u saja 

---------------------------------------------------------------------------------------------
akan diupdate klau mau kolab bru belajar lagi 




			